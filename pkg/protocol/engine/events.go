package engine

import (
	"github.com/iotaledger/hive.go/core/eventticker"
	"github.com/iotaledger/hive.go/runtime/event"
	"github.com/iotaledger/iota-core/pkg/protocol/engine/blockdag"
	"github.com/iotaledger/iota-core/pkg/protocol/engine/booker"
	"github.com/iotaledger/iota-core/pkg/protocol/engine/eviction"
	"github.com/iotaledger/iota-core/pkg/protocol/engine/filter"
	iotago "github.com/iotaledger/iota.go/v4"
)

type Events struct {
	Error          *event.Event1[error]
	BlockProcessed *event.Event1[iotago.BlockID]

	EvictionState  *eviction.Events
	Filter         *filter.Events
	BlockRequester *eventticker.Events[iotago.SlotIndex, iotago.BlockID]
	BlockDAG       *blockdag.Events
	Booker         *booker.Events

	event.Group[Events, *Events]
}

// NewEvents contains the constructor of the Events object (it is generated by a generic factory).
var NewEvents = event.CreateGroupConstructor(func() (newEvents *Events) {
	return &Events{
		Error:          event.New1[error](),
		BlockProcessed: event.New1[iotago.BlockID](),
		EvictionState:  eviction.NewEvents(),
		Filter:         filter.NewEvents(),
		BlockRequester: eventticker.NewEvents[iotago.SlotIndex, iotago.BlockID](),
		BlockDAG:       blockdag.NewEvents(),
		Booker:         booker.NewEvents(),
	}
})
